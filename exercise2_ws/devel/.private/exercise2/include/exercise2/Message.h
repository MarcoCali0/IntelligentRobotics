// Generated by gencpp from file exercise2/Message.msg
// DO NOT EDIT!


#ifndef EXERCISE2_MESSAGE_MESSAGE_H
#define EXERCISE2_MESSAGE_MESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace exercise2
{
template <class ContainerAllocator>
struct Message_
{
  typedef Message_<ContainerAllocator> Type;

  Message_()
    : room_name()
    , room_ID(0)
    , charge_level(0)  {
    }
  Message_(const ContainerAllocator& _alloc)
    : room_name(_alloc)
    , room_ID(0)
    , charge_level(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _room_name_type;
  _room_name_type room_name;

   typedef int8_t _room_ID_type;
  _room_ID_type room_ID;

   typedef int8_t _charge_level_type;
  _charge_level_type charge_level;





  typedef boost::shared_ptr< ::exercise2::Message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exercise2::Message_<ContainerAllocator> const> ConstPtr;

}; // struct Message_

typedef ::exercise2::Message_<std::allocator<void> > Message;

typedef boost::shared_ptr< ::exercise2::Message > MessagePtr;
typedef boost::shared_ptr< ::exercise2::Message const> MessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exercise2::Message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exercise2::Message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::exercise2::Message_<ContainerAllocator1> & lhs, const ::exercise2::Message_<ContainerAllocator2> & rhs)
{
  return lhs.room_name == rhs.room_name &&
    lhs.room_ID == rhs.room_ID &&
    lhs.charge_level == rhs.charge_level;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::exercise2::Message_<ContainerAllocator1> & lhs, const ::exercise2::Message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace exercise2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::exercise2::Message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exercise2::Message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercise2::Message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercise2::Message_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise2::Message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercise2::Message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exercise2::Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c2be1ef585767ad1a0db978f95b4587";
  }

  static const char* value(const ::exercise2::Message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c2be1ef585767adULL;
  static const uint64_t static_value2 = 0x1a0db978f95b4587ULL;
};

template<class ContainerAllocator>
struct DataType< ::exercise2::Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exercise2/Message";
  }

  static const char* value(const ::exercise2::Message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exercise2::Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# name of the room\n"
"string room_name\n"
"\n"
"# ID of the room\n"
"int8 room_ID\n"
"\n"
"# level of charge of the robot battery\n"
"int8 charge_level\n"
;
  }

  static const char* value(const ::exercise2::Message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exercise2::Message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.room_name);
      stream.next(m.room_ID);
      stream.next(m.charge_level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exercise2::Message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exercise2::Message_<ContainerAllocator>& v)
  {
    s << indent << "room_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.room_name);
    s << indent << "room_ID: ";
    Printer<int8_t>::stream(s, indent + "  ", v.room_ID);
    s << indent << "charge_level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.charge_level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXERCISE2_MESSAGE_MESSAGE_H
